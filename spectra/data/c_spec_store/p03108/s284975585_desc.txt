```c
// Global variables
int a[100000];
int b[100000];
int par[100000];
int root_cnt[100000];
long long int ans[100000];

// Find the root of the set containing `x`.
// If `x` is its own parent, return `x`.
// Otherwise, recursively find the root and perform path compression.
int root(int x)
    Calls root(...)

// Unite the sets containing `x` and `y`.
// If `x` and `y` are already in the same set, return 0.
// Otherwise, make the root of `x` point to the root of `y` and return 1.
int unite(int x, int y)
    Calls root(...)

// Check if `x` and `y` are in the same set.
// Return 1 if they are in the same set, 0 otherwise.
int same(int x, int y)
    Calls root(...)

// This function reads `n` and `m` representing the number of nodes and edges.
// It then reads `m` pairs of integers representing the edges of a graph.
// It initializes the union-find data structure and computes the answer for a specific graph problem.
// Finally, it prints out the results.
int main(void)
    Calls root(...)
    Calls unite(...)
    Calls same(...)
```