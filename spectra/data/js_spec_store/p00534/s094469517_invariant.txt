// Segment 1: Reading and parsing input
// Precondition: The input is provided in the format specified in the comments below.
// Input format: 
// The first line contains two integers n and m separated by a space.
// The next n lines each contain one integer representing the array d.
// The next m lines each contain one integer representing the array c.
// Postcondition: The variables n, m, d, and c are initialized and populated with the input values.

var input = require('fs').readFileSync('/dev/stdin', 'utf8');
var arr = input.trim().split("\n");
var nm = arr.shift().split(" ").map(Number);
var n = nm[0];
var m = nm[1];
var d = [];
for (var i = 0; i < n; i++) d.push(arr.shift() - 0);
var c = [];
for (var i = 0; i < m; i++) c.push(arr.shift() - 0);

// Segment 2: Initializing the dp array
// Precondition: n, m, d, and c arrays are initialized and populated.
// Postcondition: The dp array is initialized such that dp[i][j] = Infinity for all i and j, except dp[0][0] which is 0.

var dp = [];
for (var i = 0; i <= m; i++) {
    dp[i] = [];
    for (var j = 0; j <= n; j++) {
        dp[i][j] = Infinity;
    }
}
dp[0][0] = 0;

// Segment 3: Dynamic programming computation
// Precondition: The dp array is initialized with dp[0][0] = 0 and all other values as Infinity.
// Postcondition: The dp array is updated with the minimum cost of assigning tasks to workers up to each point.

for (var i = 0; i < m; i++) {
    var C = c[i];
    for (var j = 0; j < n; j++) {
        var D = d[j];
        for (var k = 1; i + k <= m; k++) {
            dp[i + k][j] = Math.min(dp[i + k][j], dp[i][j]);
            dp[i + k][j + 1] = Math.min(dp[i + k][j + 1], dp[i][j] + C * D);
        }
    }
}

// Segment 4: Output the result
// Precondition: The dp array is fully computed with the minimum costs.
// Output format: A single integer which is the minimum cost to complete all tasks.
// Postcondition: The minimum cost to complete all tasks is printed to the console.

console.log(dp[m][n]);