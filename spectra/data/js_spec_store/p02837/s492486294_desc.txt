// Setup readline interface for reading input from stdin
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

// Variable declarations for storing input and processing
var obj;
var inLine = [];

// Event listener for reading lines of input
read.on('line', function(input) {
    inLine.push(input);
});

// Event listener for when the input stream is closed
read.on('close', function() {
    obj = init(inLine);
    console.error('\n');
    var start = Date.now();
    Main();
    var end = Date.now() - start;
    myerr('time : ' + end + 'ms');
    myerr('memory : ' + Math.round(process.memoryUsage().heapTotal / 1024) + 'KB');
});

// Function to clone an object (handles Set and JSON objects)
function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

// Various utility functions to get different types of input
function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

// Functions to get the next input and check if more input exists
function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

// Initialize the input object with methods for reading input
function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException â€šThere is no more input';
            }
        }
    };
}

// Utility functions for outputting to console and error stream
function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Function to convert input data to various formats based on the specified type
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Main function to process the input and determine the maximum number of honest persons
function Main() {
    var N = nextInt();
    var list = new Array(N);
    for (var i = 0; i < N; i++) {
        var Ai = nextInt();
        list[i] = {
            check: []
        };
        for (var j = 0; j < Ai; j++) {
            var tmp = nextIntArray();
            list[i].check.push([tmp[0] - 1, tmp[1]]);
        }
    }

    var max = 0;
    for (var i = 0; i < (1 << N); i++) {
        var selected = [];
        for (var j = 0; j < N; j++) {
            if ((i & (1 << j)) != 0) {
                selected.push(j);
            }
        }
        var count = selected.length;
        var isOK = true;
        for (var j = 0; j < selected.length; j++) {
            var tmpcheck = list[selected[j]].check;
            for (var k = 0; k < tmpcheck.length; k++) {
                if (tmpcheck[k][1] == 0) {
                    if (selected.indexOf(tmpcheck[k][0]) != -1) {
                        isOK = false;
                        break;
                    }
                } else {
                    if (selected.indexOf(tmpcheck[k][0]) == -1) {
                        isOK = false;
                        break;
                    }
                }
            }
        }
        if (isOK) {
            max = Math.max(max, count);
        }
    }
    myout(max);
}