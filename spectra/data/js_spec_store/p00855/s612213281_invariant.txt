// Segment 1: Function to generate prime numbers up to a given maximum
// Precondition: max is a non-negative integer
// Postcondition: Returns an array of prime numbers up to and including max
function prime(max) {
    var arr = [];
    for (var i = 0; i <= max; i++) arr[i] = i;
    arr[0] = false;
    arr[1] = false;
    var sqrt = Math.floor(Math.sqrt(max));
    for (var i = 2; i <= sqrt; i++) {
        if (arr[i] == false) continue;
        for (var j = i + i; j <= max; j += i) {
            arr[j] = false;
        }
    }
    var result = [];
    for (var i = 0; i <= max; i++) {
        if (arr[i] !== false) result.push(arr[i]);
    }
    return result;
}

// Segment 2: Generate prime numbers up to 1299709
// Precondition: The prime function is defined and works correctly
// Postcondition: p is an array of prime numbers up to and including 1299709
var p = prime(1299709);

// Segment 3: Read input from stdin and convert it to an array of numbers
// Precondition: Input should be a series of numbers separated by newlines, ending with a 0
// Postcondition: Arr is an array of numbers read from the input
// Input format: Each number is on a new line. The sequence ends with a line containing '0'.
// Example input:
// 10
// 11
// 27
// 2
// 492170
// 0
var input = require('fs').readFileSync('/dev/stdin', 'utf8');
var Arr = (input.trim()).split("\n").map(Number);

// Segment 4: Process each number in Arr to find the difference between the nearest prime numbers
// Precondition: Arr is an array of numbers with each number greater than or equal to 0, ending with a 0
// Postcondition: Prints the difference between the nearest primes for each number in Arr, or 0 if the number is prime
// Output format: Each result is printed on a new line
// Example output:
// 4
// 0
// 6
// 0
// 114
for (var i = 0; i < Arr.length; i++) {
    var a = Arr[i];
    if (a == 0) break;
    for (var j = 0; j < p.length; j++) {
        if (p[j] == a) {
            console.log(0);
            break;
        }
        if (p[j] > a) {
            console.log(p[j] - p[j - 1]);
            break;
        }
    }
}