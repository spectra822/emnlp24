// Function to generate a list of prime numbers up to a given maximum using the Sieve of Eratosthenes algorithm
function prime(max) {
    var arr = [];
    for (var i = 0; i <= max; i++) arr[i] = i;
    arr[0] = false;
    arr[1] = false;
    var sqrt = Math.floor(Math.sqrt(max));
    for (var i = 2; i <= sqrt; i++) {
        if (arr[i] == false) continue;
        for (var j = i + i; j <= max; j += i) {
            arr[j] = false;
        }
    }
    var result = [];
    for (var i = 0; i <= max; i++) {
        if (arr[i] !== false) result.push(arr[i]);
    }
    return result;
}

// Generate prime numbers up to 50000
var p = prime(50000);

// Read input from the standard input (usually for competitive programming)
var input = require('fs').readFileSync('/dev/stdin', 'utf8');
var Arr = (input.trim()).split("\n");

// Continuously process each number from the input until a zero is encountered
while (true) {
    var n = Arr.shift() - 0;
    if (n == 0) break;
    
    // Count the number of ways to express `n` as the sum of two prime numbers
    var cnt = 0;
    var k = p.length - 1;
    for (var i = 0; i < p.length; i++) {
        while (p[i] + p[k] > n) k--;
        if (k < i) break;
        if (p[i] + p[k] == n) cnt++;
    }
    
    // Output the count for the current number
    console.log(cnt);
}