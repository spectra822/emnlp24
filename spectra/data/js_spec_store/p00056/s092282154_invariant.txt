// Segment 1: prime function definition

// Precondition: `max` is a non-negative integer.
// Postcondition: Returns an array of all prime numbers up to `max`.
function prime(max) {
    var arr = [];
    for (var i = 0; i <= max; i++) arr[i] = i;
    arr[0] = false;
    arr[1] = false;
    var sqrt = Math.floor(Math.sqrt(max));
    for (var i = 2; i <= sqrt; i++) {
        if (arr[i] == false) continue;
        for (var j = i + i; j <= max; j += i) {
            arr[j] = false;
        }
    }
    var result = [];
    for (var i = 0; i <= max; i++) {
        if (arr[i] !== false) result.push(arr[i]);
    }
    return result;
}

// Segment 2: Variable declarations and initializations

// Precondition: None.
// Postcondition: `p` contains all prime numbers up to 50000, `input` contains the input data read from '/dev/stdin', and `Arr` contains the input data split by lines.
var p = prime(50000);
var input = require('fs').readFileSync('/dev/stdin', 'utf8');
var Arr = (input.trim()).split("\n");

// Segment 3: Main loop to process each input number

// Input format: Each line of `input` is an integer.
// Output format: The number of pairs of prime numbers that sum to each input integer `n` (one result per line).
// Precondition: `Arr` is an array of strings representing integers.
// Postcondition: For each integer in `Arr` (until a zero is encountered), the number of pairs of primes that sum to that integer is printed to the console.
while (true) {
    var n = Arr.shift() - 0;
    if (n == 0) break;
    var cnt = 0;
    var k = p.length - 1;
    for (var i = 0; i < p.length; i++) {
        while (p[i] + p[k] > n) k--;
        if (k < i) break;
        if (p[i] + p[k] == n) cnt++;
    }
    console.log(cnt);
}