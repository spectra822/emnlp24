// Segment 1: Read and process input
// Precondition: The input is a string with multiple lines, each line containing space-separated integers.
// Postcondition: The input is processed into a 2D array of integers.
function Main(input) {
    input = input.trim().split("\n").map(function(x) {
        return x.split(" ")
    });

    // Segment 2: Parse input values to integers
    // Precondition: The input is a 2D array of strings where each string represents a number.
    // Postcondition: The variables T1, T2, A1, A2, B1, and B2 are initialized as integers.
    let T1 = parseInt(input[0][0], 10);
    let T2 = parseInt(input[0][1], 10);
    let A1 = parseInt(input[1][0], 10);
    let A2 = parseInt(input[1][1], 10);
    let B1 = parseInt(input[2][0], 10);
    let B2 = parseInt(input[2][1], 10);

    // Segment 3: Calculate distance differences using BigInt
    // Precondition: T1, T2, A1, A2, B1, and B2 are integers.
    // Postcondition: The variables d1 and d2 are initialized as BigInt values representing the distance differences.
    let d1 = BigInt(A1 - B1) * BigInt(T1);
    let d2 = BigInt(A2 - B2) * BigInt(T2) + d1;

    // Segment 4: Calculate the answer based on the distance differences
    // Precondition: d1 and d2 are BigInt values representing the distance differences.
    // Postcondition: The variable `ans` is assigned the correct value based on the conditions.
    let ans = 0n;
    let tmp;
    if (d2 === 0n) ans = 'infinity';
    else if (d1 * d2 < 0n) {
        d2 = d2 * -1n;
        tmp = (d1 / d2);
        ans = (tmp * d2 === d1) ? tmp * 2n : tmp * 2n + 1n;
    } else ans = 0;

    // Segment 5: Output the result
    // Precondition: ans is a BigInt or a string representing the result.
    // Postcondition: The result is printed to the console.
    // Output format: The output is a single line containing either a number (as a string) or the string 'infinity'.
    console.log(ans.toString());
}

// Input format: The input is read from standard input (stdin) and is expected to be a string of multiple lines,
// each containing space-separated integers.
// Example input:
// 1 2
// 10 10
// 12 4
Main(require("fs").readFileSync("/dev/stdin", "utf8"));