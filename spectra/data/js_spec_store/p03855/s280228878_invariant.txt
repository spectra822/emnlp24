// Segment 1: Read input and prepare for processing
// Precondition: The program is started and ready to read input from stdin.
// Postcondition: The input has been read and stored in the inLine array, and the processing function Main is ready to be called.

var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});
var obj;
var inLine = [];
read.on('line', function(input) {
    inLine.push(input);
});
read.on('close', function() {
    obj = init(inLine);
    console.error('\n↑入力 ↓出力');
    Main();
});

// Segment 2: Utility functions for input processing and cloning objects
// Precondition: The input reading process has been initialized.
// Postcondition: Utility functions for converting input and cloning objects are defined and ready to be used.

function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException ‚There is no more input';
            }
        }
    };
}

function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Segment 3: Input conversion function
// Precondition: Input strings need to be converted into different formats.
// Postcondition: The input strings are converted into the required format and returned.

function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Segment 4: Main processing function
// Input Format: 
// - First line contains three integers N, K, L separated by spaces.
// - Next K lines each contain two integers representing K edges.
// - Next L lines each contain two integers representing L edges.
// Precondition: The input has been read and stored in the inLine array.
// Postcondition: The output array is calculated and printed.
// Output Format: 
// - A single line containing N integers separated by spaces.

function Main() {
    var one = nextIntArray();
    var N = one[0];
    var K = one[1];
    var L = one[2];
    var ufk = unionFind(N);
    var ufl = unionFind(N);
    var output = new Array(N);
    var klist = new Array(K);
    var llist = new Array(L);
    for (var i = 0; i < K; i++) {
        var tmp = nextIntArray();
        tmp.sort();
        tmp[0]--;
        tmp[1]--;
        klist[i] = tmp;
        ufk.doUnion(tmp[0], tmp[1]);
    }
    for (var i = 0; i < L; i++) {
        var tmp = nextIntArray();
        tmp.sort();
        tmp[0]--;
        tmp[1]--;
        llist[i] = tmp;
        ufl.doUnion(tmp[0], tmp[1]);
    }
    var map = {};
    for (var i = 0; i < N; i++) {
        var rt = ufl.getRootIndex(i) + ":" + ufk.getRootIndex(i);
        if (map[rt] == null) {
            map[rt] = 0;
        }
        map[rt]++;
    }
    for (var i = 0; i < N; i++) {
        output[i] = map[ufl.getRootIndex(i) + ":" + ufk.getRootIndex(i)];
    }
    myout(myconv(output, 8));
}

// Segment 5: Union-Find data structure and operations
// Precondition: The main function requires a union-find data structure to manage and merge sets.
// Postcondition: The union-find functions are defined and can be used to manage sets of nodes.

function unionFind(n) {
    var uf = {
        "list": new Array(n).fill(-1),

        "isSame": function(mae, ato) {
            return this.getRootIndex(mae) == this.getRootIndex(ato);
        },

        "getRootIndex": function(index) {
            if (this.list[index] < 0) {
                return index;
            } else {
                this.list[index] = this.getRootIndex(this.list[index]);
                return this.list[index];
            }
        },

        "doUnion": function(mae, ato) {
            var maeRoot = this.getRootIndex(mae);
            var atoRoot = this.getRootIndex(ato);
            if (!this.isSame(maeRoot, atoRoot)) {
                if (maeRoot >= atoRoot) {
                    this.list[maeRoot] += this.list[atoRoot];
                    this.list[atoRoot] = maeRoot;
                } else {
                    this.list[atoRoot] += this.list[maeRoot];
                    this.list[maeRoot] = atoRoot;
                }
            }
        },

        "getSize": function(index) {
            return -this.list[this.getRootIndex(index)];
        }
    }
    return uf;
}