// Segment 1: Import and setup for reading input
// Precondition: None
// Postcondition: The program is set up to read input from the standard input.
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});
var obj;
var inLine = [];
read.on('line', function(input) {
    inLine.push(input);
});
read.on('close', function() {
    obj = init(inLine);
    console.error('\n↑入力 ↓出力');
    Main();
});

// Segment 2: Utility functions for cloning and converting data
// Precondition: None
// Postcondition: Utility functions are defined to handle cloning objects and converting data formats.
function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

// Segment 3: Input handling functions
// Precondition: 'obj' is initialized with the input data.
// Postcondition: Functions to manage the input data are defined.
function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException ‚There is no more input';
            }
        }
    };
}

// Segment 4: Output and debugging functions
// Precondition: None
// Postcondition: Functions for outputting results and debugging information are defined.
function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Segment 5: Data conversion function
// Precondition: None
// Postcondition: Function for converting data based on a specified type is defined.
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Segment 6: Main function and related logic
// Precondition: Input has been read and 'obj' has been initialized.
// Postcondition: The main logic of the program has executed, generating all possible strings of length 'N' using the first 'N' letters of the alphabet.
// Input: A single integer 'N' (e.g., "1\n")
// Output: All combinations of 'N' letters from the alphabet in lexicographical order, separated by newline.
function Main() {
    var N = nextInt();
    var s = "abcdefghijklmnopqrstuvwxyz";
    var output = [];
    dfs([], 0);
    output.sort();
    myout(myconv(output, 9));

    function dfs(list, max) {
        if (list.length == N) {
            output.push(list.join(""));
            return;
        }
        for (var i = 0; i <= max; i++) {
            var tmp = makeClone(list);
            tmp.push(s[i]);
            dfs(tmp, Math.max(max, s.indexOf(s[i]) + 1));
        }
    }
}
     a