// Initialize the input object and start the main function
var obj = init();
Main();

// Function to get the next integer from the input
function nextInt() {
    return myconv(next(), 1);
}

// Function to get the next string array from the input
function nextStrArray() {
    return myconv(next(), 2);
}

// Function to get the next integer array from the input
function nextIntArray() {
    return myconv(next(), 4);
}

// Function to get the next character array from the input
function nextCharArray() {
    return myconv(next(), 6);
}

// Function to get the next input line
function next() {
    return obj.next();
}

// Function to check if there are more input lines
function hasNext() {
    return obj.hasNext();
}

// Function to read the input from standard input and split it into lines
function myin() {
    return require("fs").readFileSync("/dev/stdin", "utf8").trim().split("\n");
}

// Initialize the input object with methods to navigate through the input lines
function init() {
    var inputFile = myin();
    var returnObj = {
        "list": inputFile,
        "index": 0,
        "max": inputFile.length,
        "hasNext": function() {
            return (this.index < this.max);
        },
        "next": function() {
            if (!this.hasNext()) {
                return "";
            } else {
                var returnInput = this.list[this.index];
                this.index++;
                return returnInput;
            }
        }
    };
    return returnObj;
}

// Function to output the result
function myout(t) {
    console.log(t);
}

// Function to output errors
function myerr(t) {
    console.error(t);
}

// Function to convert input based on the provided type identifier
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(" ");
            case 4:
                return i.split(" ").map((a) => Number(a));
            case 6:
                return i.split("");
            case 7:
                return i.split("").map((a) => Number(a));
            case 8:
                return i.join(" ");
            case 9:
                return i.join("\n");
            case 0:
                return i.join("");
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Main function to process the input and produce the output
function Main() {
    // Read the first line of input as an integer array
    var one = nextIntArray();
    var N = one[0];
    var M = one[1];
    
    // Initialize a list with N elements all set to 1
    var list = new Array(N).fill(1);
    
    // Set to keep track of positions visited by the red ball
    var redVisited = new Set([0]);
    
    // Process each move
    for (var i = 0; i < M; i++) {
        var tmp = nextIntArray();
        
        // Update the list based on the move
        list[tmp[0] - 1]--;
        list[tmp[1] - 1]++;
        
        // Update the redVisited set
        if (redVisited.has(tmp[0] - 1)) {
            redVisited.add(tmp[1] - 1);
        }
        if (list[tmp[0] - 1] == 0) {
            redVisited.delete(tmp[0] - 1);
        }
    }
    
    // Output the size of the redVisited set
    myout(redVisited.size);
}