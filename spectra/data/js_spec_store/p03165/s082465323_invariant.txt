// Segment 1: Input Processing
// Precondition: The input is a string with multiple lines, where each line contains a single word.
// Postcondition: The input is split into two arrays of characters, `s` and `t`.
function Main(input) {
    input = input.trim().split("\n").map(function(x) {
        return x.split(" ")
    });

    let s = input[0][0].split("");
    let t = input[1][0].split("");

    // Segment 2: Initialization of DP Array
    // Precondition: `s` and `t` are arrays of characters.
// Postcondition: `arr_dp` is initialized as a 2D array with dimensions (t.length + 1) x (s.length + 1),
//                and the first row and column are set to 0.
    var arr_dp = [];
    for (var j = 0; j <= t.length; j++) {
        arr_dp.push([]);
        arr_dp[j][0] = 0;
    }
    for (var i = 0; i <= s.length; i++) {
        arr_dp[0][i] = 0;
    }

    // Segment 3: DP Array Population
    // Precondition: `arr_dp` is a 2D array with first row and column initialized to 0.
// Postcondition: `arr_dp` is populated using the logic of longest common subsequence (LCS) between `s` and `t`.
    for (var j = 0; j < t.length; j++) {
        for (var i = 0; i < s.length; i++) {
            if (s[i] === t[j]) arr_dp[j + 1][i + 1] = arr_dp[j][i] + 1;
            else arr_dp[j + 1][i + 1] = Math.max(arr_dp[j + 1][i], arr_dp[j][i + 1]);
        }
    }

    // Segment 4: Backtracking to Find LCS
    // Precondition: `arr_dp` is fully populated with LCS values.
// Postcondition: `v_ans` contains the longest common subsequence between `s` and `t`.
    let l = arr_dp[t.length][s.length];
    let tmpLocation1 = t.length;
    let tmpLocation2 = s.length;
    let tmpCharacter;
    let v_ans = [];
    for (let i = 0; i < l; i++) {
        for (let j = tmpLocation2; j >= 1; j--) {
            if (arr_dp[tmpLocation1][j] > arr_dp[tmpLocation1][j - 1]) {
                tmpLocation2 = j - 1;
                break;
            }
        }
        tmpCharacter = s[tmpLocation2];
        for (let j = tmpLocation1; j >= 1; j--) {
            if (t[j - 1] === tmpCharacter) {
                v_ans.push(tmpCharacter);
                tmpLocation1 = j - 1;
                break;
            }
        }
    }

    // Segment 5: Output the Result
    // Precondition: `v_ans` contains the characters of the longest common subsequence in reverse order.
// Postcondition: The longest common subsequence is printed in the correct order.
// Input Format: The input is provided as a string, read from standard input.
// Output Format: The output is a single string printed to the standard output.
    console.log(v_ans.reverse().join(""));
}

// Call the main function with input from standard input
Main(require("fs").readFileSync("/dev/stdin", "utf8"));