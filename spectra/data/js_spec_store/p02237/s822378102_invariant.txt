(function main() {
    // Precondition: The program expects to read input from standard input.
    // The input format should be:
    // Line 1: A single integer n (number of nodes)
    // Line 2 to n+1: Each line contains a node number followed by the number of connections and the connected nodes.
    // Example:
    // 4
    // 1 2 2 4
    // 2 1 4
    // 3 0
    // 4 1 3
    const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\n');

    // Precondition: The first element of lines should be a valid integer representing the number of nodes.
    // Postcondition: n will hold the number of nodes.
    const n = Number(lines.shift());

    // Precondition: n should be a positive integer.
    // Postcondition: res will be a 2D array of size n x n initialized to 0.
    const res = Array.from(Array(n), () => Array.from(Array(n), () => 0));

    // Precondition: lines should contain n lines, each line containing node connections in the expected format.
    // Postcondition: res will be updated such that res[i][j] = 1 if there is a connection from node i+1 to node j+1.
    lines.forEach((l, i) => l.split(' ').splice(2).forEach(e => res[i][e - 1] = 1));

    // Precondition: res should be a properly formatted adjacency matrix.
    // Postcondition: The adjacency matrix will be printed to the standard output in the expected format.
    // Output format:
    // Each line should contain n space-separated integers (0 or 1) representing the adjacency matrix.
    // Example:
    // 0 1 0 1
    // 0 0 0 1
    // 0 0 0 0
    // 0 0 1 0
    console.log(res.map(r => r.join(' ')).join('\n'));
})();