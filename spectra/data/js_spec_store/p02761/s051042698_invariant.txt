// Segment 1: Variable Declarations and Initial Setup
// Precondition: Node.js environment with 'readline' module available.
// Postcondition: 'read' interface created to handle input from stdin and output to stdout.
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});
var obj;
var inLine = [];
read.on('line', function(input) {
    inLine.push(input);
});
read.on('close', function() {
    obj = init(inLine);
    console.error('\n↑入力 ↓出力');
    Main();
});

// Segment 2: Utility Functions
// Precondition: Utility functions are defined for cloning objects, type conversion, and handling input.
// Postcondition: Utility functions are available for use in the program.
function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

// Segment 3: Initialization Function
// Precondition: 'input' is an array of strings representing the input lines.
// Postcondition: Returns an object with methods to iterate over the input lines.
function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException ‚There is no more input';
            }
        }
    };
}

// Segment 4: Output and Error Handling Functions
// Precondition: String 's' is provided for logging.
// Postcondition: String 's' is either logged to console or logged as an error.
function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Segment 5: Conversion Utility Function
// Precondition: 'i' is a string or array, 'no' is an integer specifying the type of conversion.
// Postcondition: Returns the converted value based on the 'no' parameter.
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Segment 6: Main Function
// Precondition: 'obj' is initialized with input data, and utility functions are available.
// Postcondition: Logs the smallest integer that matches the given conditions or -1 if no such integer exists.
// Input format: 'N M' followed by 'M' lines of 'si ci'.
// Output format: Integer or -1.
function Main() {
    var one = nextIntArray();
    var N = one[0];
    var M = one[1];
    var list = new Array(M);
    for (var i = 0; i < M; i++) {
        var tmp = nextIntArray();
        list[i] = {
            si: tmp[0],
            ci: tmp[1]
        };
    }
    for (var i = 0; i < Math.pow(10, N); i++) {
        var isOK = true;
        var check = i.toString();
        if (check.length != N) {
            isOK = false;
        }
        for (var j = 0; j < M; j++) {
            if (check[list[j].si - 1] != list[j].ci) {
                isOK = false;
            }
        }
        if (isOK) {
            myout(i);
            return;
        }
    }
    myout(-1);
}