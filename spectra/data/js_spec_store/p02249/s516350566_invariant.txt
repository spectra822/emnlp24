// Segment 1: Configuration and Initial Setup
// Precondition: None
// Postcondition: The configuration object and the initial variables are set up based on the input.
config = {
    input: '/dev/stdin',
    newline: '\n'
};  

line = require('fs').readFileSync(config.input, 'ascii')
    .split(config.newline);
line[0] = line[0].split(' ').map(Number);
H = line[0][0];
W = line[0][1];
field = line.slice(1, 1 + H);
line[1 + H] = line[1 + H].split(' ').map(Number);
R = line[1 + H][0];
C = line[1 + H][1];
pat = line.slice(1 + H + 1, 1 + H + 1 + R);

// Segment 2: Check Feasibility
// Precondition: H, W, R, and C are initialized
// Postcondition: If the pattern dimensions are larger than the field dimensions, the program exits.
if (H < R || W < C) process.exit();

// Segment 3: Hashing Setup
// Precondition: H, W, R, and C are within valid ranges
// Postcondition: A hash object and a counter are initialized for pattern registration.
hash = {};
cnt = 0;

function register(str) {
    if (!hash.hasOwnProperty(str)) {
        hash[str] = cnt;
        return cnt++;
    }
    return hash[str];
}

// Segment 4: Convert Field and Pattern
// Precondition: field and pat are initialized with the correct dimensions
// Postcondition: field and pat are converted into arrays of hashes representing substrings
matrix = field.map(function(str) {
    var res, i;
    res = [];
    for (i = 0; i <= W - C; i++) res.push(register(str.slice(i, i + C)));
    return res;
});
pat = pat.map(register);

// Segment 5: Pattern Matching
// Precondition: matrix and pat are arrays of hashes
// Postcondition: The starting coordinates of the pattern matches within the field are printed to the console.
// Input: None
// Output: Coordinates of pattern matches in the format "i j", one per line.
for (i = 0; i <= H - R; i++) {
    for (j = 0; j <= W - C; j++) {
        flag = true;
        for (k = 0; k < R; k++) {
            if (matrix[i + k][j] !== pat[k]) {
                flag = false;
                break;
            }
        }
        if (flag) console.log(i, j);
    }
}