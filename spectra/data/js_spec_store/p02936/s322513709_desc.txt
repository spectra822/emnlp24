// Setting up the readline interface to read input from stdin and output to stdout
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

// Variable declarations for input processing
var obj;
var inLine = [];

// Reading lines of input and pushing them into the inLine array
read.on('line', function(input) {
    inLine.push(input);
});

// Handling the close event to process the input and run the Main function
read.on('close', function() {
    obj = init(inLine);
    console.error("\n");
    var start = Date.now();
    Main();
    var end = Date.now() - start;
    myerr("time : " + end + "ms");
    myerr("memory : " + Math.round(process.memoryUsage().heapTotal / 1024) + "KB");
});

// Utility function to create a deep clone of an object
function makeClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}

// Functions to get the next input as different types
function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

// Function to get the next input from the input object
function next() {
    return obj.next();
}

// Function to check if there is more input available
function hasNext() {
    return obj.hasNext();
}

// Initialization function to wrap the input in an object with utility methods
function init(input) {
    var returnObj = {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (!this.hasNext()) {
                throw "ArrayIndexOutOfBoundsException â€šThere is no more input";
            } else {
                var returnInput = this.list[this.index++];
                return returnInput;
            }
        }
    };
    return returnObj;
}

// Utility function to output a string
function myout(s) {
    console.log(s);
}

// Utility function to output debug information
function myerr(s) {
    console.error("debug:" + require("util").inspect(s, false, null));
}

// Utility function to convert input into different formats
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(" ");
            case 4:
                return i.split(" ").map(Number);
            case 6:
                return i.split("");
            case 7:
                return i.split("").map(Number);
            case 8:
                return i.join(" ");
            case 9:
                return i.join("\n");
            case 0:
                return i.join("");
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Main function to process the input and perform the required operations
function Main() {
    var one = nextIntArray();
    var N = one[0];
    var Q = one[1];
    var list = new Array(N);
    
    // Initializing the list with default objects
    for (var i = 0; i < N; i++) {
        list[i] = {
            child: [],
            access: false,
            add: 0,
            count: 0
        };
    }
    
    // Reading tree edges and updating the child relationships
    for (var i = 0; i < N - 1; i++) {
        var tmp = nextIntArray();
        list[tmp[0] - 1].child.push(tmp[1] - 1);
        list[tmp[1] - 1].child.push(tmp[0] - 1);
    }
    
    // Reading queries and updating the add values
    for (var i = 0; i < Q; i++) {
        var tmp = nextIntArray();
        list[tmp[0] - 1].add += tmp[1];
    }
    
    // Breadth-first search (BFS) to propagate the add values
    var maeIndex = 0;
    var atoIndex = 1;
    var queue = new Array(N + 100);
    queue[maeIndex] = 0;
    list[0].access = true;
    while (maeIndex != atoIndex) {
        var now = queue[maeIndex];
        maeIndex++;
        list[now].count += list[now].add;
        var child = list[now].child;
        for (var i = 0; i < child.length; i++) {
            if (!list[child[i]].access) {
                list[child[i]].access = true;
                list[child[i]].add += list[now].add;
                queue[atoIndex] = child[i];
                atoIndex++;
            }
        }
    }
    
    // Preparing the output array with the final counts
    var output = new Array(N);
    for (var i = 0; i < N; i++) {
        output[i] = list[i].count;
    }
    
    // Outputting the result
    myout(myconv(output, 8));
}