// Segment 1: Variable Declaration and Setup

// Precondition: No variables are declared or initialized.
// Postcondition: Various variables and interfaces necessary for reading input, storing data, and managing program state are declared and initialized.

var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});
var obj;
var inLine = [];
read.on('line', function(input) {
    inLine.push(input);
});
read.on('close', function() {
    obj = init(inLine);
    console.error("\n");
    var start = Date.now();
    Main();
    var end = Date.now() - start;
    myerr("time : " + end + "ms");
    myerr("memory : " + Math.round(process.memoryUsage().heapTotal / 1024) + "KB");
});

// Segment 2: Utility Functions

// Precondition: No utility functions are defined.
// Postcondition: Several utility functions are defined to support cloning objects, converting input, and managing input reading.

function makeClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}

function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

// Segment 3: Initialization Function

// Precondition: The input array is collected but not processed.
// Postcondition: The input array is processed into an object that can provide the next input line and check if more input is available.

function init(input) {
    var returnObj = {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (!this.hasNext()) {
                throw "ArrayIndexOutOfBoundsException â€šThere is no more input";
            } else {
                var returnInput = this.list[this.index++];
                return returnInput;
            }
        }
    };
    return returnObj;
}

// Segment 4: Output and Debug Functions

// Precondition: Output and debug functions are not defined.
// Postcondition: Functions to output results and debug information are defined.

function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error("debug:" + require("util").inspect(s, false, null));
}

// Segment 5: Conversion Function

// Precondition: No conversion functions are defined.
// Postcondition: A function to convert input strings to various formats (integers, arrays of strings, arrays of numbers, etc.) is defined.

function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(" ");
            case 4:
                return i.split(" ").map(Number);
            case 6:
                return i.split("");
            case 7:
                return i.split("").map(Number);
            case 8:
                return i.join(" ");
            case 9:
                return i.join("\n");
            case 0:
                return i.join("");
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Segment 6: Main Function

// Precondition: Input is read and utility functions are defined. Input format is as follows:
// Line 1: Two integers N and Q separated by a space.
// Next N-1 lines: Two integers representing the edges of the tree.
// Next Q lines: Two integers representing the node to be updated and the value to add.
// Postcondition: The main logic of the program is executed, and the output (space-separated integer values) is printed to the console.

function Main() {
    var one = nextIntArray();
    var N = one[0];
    var Q = one[1];
    var list = new Array(N);
    for (var i = 0; i < N; i++) {
        list[i] = {
            child: [],
            access: false,
            add: 0,
            count: 0
        };
    }
    for (var i = 0; i < N - 1; i++) {
        var tmp = nextIntArray();
        list[tmp[0] - 1].child.push(tmp[1] - 1);
        list[tmp[1] - 1].child.push(tmp[0] - 1);
    }
    for (var i = 0; i < Q; i++) {
        var tmp = nextIntArray();
        list[tmp[0] - 1].add += tmp[1];
    }
    var maeIndex = 0;
    var atoIndex = 1;
    var queue = new Array(N + 100);
    queue[maeIndex] = 0;
    list[0].access = true;
    while (maeIndex != atoIndex) {
        var now = queue[maeIndex];
        maeIndex++;
        list[now].count += list[now].add;
        var child = list[now].child;
        for (var i = 0; i < child.length; i++) {
            if (!list[child[i]].access) {
                list[child[i]].access = true;
                list[child[i]].add += list[now].add;
                queue[atoIndex] = child[i];
                atoIndex++;
            }
        }
    }
    var output = new Array(N);
    for (var i = 0; i < N; i++) {
        output[i] = list[i].count;
    }
    myout(myconv(output, 8));
}