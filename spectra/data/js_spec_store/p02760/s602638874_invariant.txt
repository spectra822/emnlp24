// Segment 1: Variable declarations and initial setup
// Precondition: None
// Postcondition: `read` is set up to read from stdin, `obj` and `inLine` are declared.
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});
var obj;
var inLine = [];

// Segment 2: Read input lines
// Precondition: `read` is initialized
// Postcondition: `inLine` contains all input lines from stdin
read.on('line', function(input) {
    inLine.push(input);
});

// Segment 3: Close read and initialize obj
// Precondition: `inLine` contains all input lines
// Postcondition: `obj` is initialized with the input lines, `Main()` is called
read.on('close', function() {
    obj = init(inLine);
    console.error('\n↑入力 ↓出力');
    Main();
});

// Segment 4: Utility function to clone objects
// Precondition: `obj` is a valid object or Set
// Postcondition: A deep clone of `obj` is returned
function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

// Segment 5: Input handling functions
// Precondition: `obj` is initialized and has input lines
// Postcondition: Returns the next input as integer, string array, integer array, or character array as needed
function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

// Segment 6: Input iteration control
// Precondition: `obj` is initialized and has input lines
// Postcondition: Returns the next input line or checks for remaining input lines
function next() {
    return obj.next();
}

function hasNext() {
    return obj.hasNext();
}

// Segment 7: Initialize input object
// Precondition: `input` is an array of strings
// Postcondition: Returns an object with methods to iterate through `input`
function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException ‚There is no more input';
            }
        }
    };
}

// Segment 8: Output helpers
// Precondition: `s` is a string
// Postcondition: Logs `s` to stdout or stderr
function myout(s) {
    console.log(s);
}

function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Segment 9: Input conversion utility
// Precondition: `i` is an input string and `no` is a conversion type
// Postcondition: Returns the converted input based on the type specified by `no`
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Segment 10: Main logic
// Precondition: `obj` is initialized and contains the input in the expected format
// Postcondition: Outputs "Yes" or "No" based on the game logic

/* 
Input format:
Line 1 to 3: Three lines of three integers each, separated by spaces.
Line 4: A single integer N.
Line 5 to N+4: N lines of single integers.

Example:
84 97 66
79 89 11
61 59 7
7
89
7
87
79
24
84
30

Output format:
A single line "Yes" or "No".
*/

function Main() {
    var list = new Array(3);
    for (var i = 0; i < 3; i++) {
        list[i] = nextIntArray();
    }
    var N = nextInt();
    for (var i = 0; i < N; i++) {
        var bi = nextInt();
        for (var j = 0; j < 3; j++) {
            for (var k = 0; k < 3; k++) {
                if (list[j][k] == bi) {
                    list[j][k] = -1;
                }
            }
        }
    }
    if ((list[0][0] == -1 && list[0][1] == -1 && list[0][2] == -1) ||
        (list[1][0] == -1 && list[1][1] == -1 && list[1][2] == -1) ||
        (list[2][0] == -1 && list[2][1] == -1 && list[2][2] == -1) ||
        (list[0][0] == -1 && list[1][0] == -1 && list[2][0] == -1) ||
        (list[0][1] == -1 && list[1][1] == -1 && list[2][1] == -1) ||
        (list[0][2] == -1 && list[1][2] == -1 && list[2][2] == -1) ||
        (list[0][0] == -1 && list[1][1] == -1 && list[2][2] == -1) ||
        (list[2][0] == -1 && list[1][1] == -1 && list[0][2] == -1)) {
        myout("Yes");
    } else {
        myout("No");
    }
}