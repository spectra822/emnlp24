// Importing the readline module and setting up the interface for reading input
var read = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

// Variable declarations to store input lines and the object to manage input
var obj;
var inLine = [];

// Event listener to collect input lines
read.on('line', function(input) {
    inLine.push(input);
});

// Event listener to initialize the object and call the main function once input is complete
read.on('close', function() {
    obj = init(inLine);
    console.error('\n↑入力 ↓出力');
    Main();
});

// Function to create a deep clone of an object
function makeClone(obj) {
    return (obj instanceof Set) ? new Set(Array.from(obj)) : JSON.parse(JSON.stringify(obj));
}

// Functions to retrieve and convert the next input line to various types
function nextInt() {
    return myconv(next(), 1);
}

function nextStrArray() {
    return myconv(next(), 2);
}

function nextIntArray() {
    return myconv(next(), 4);
}

function nextCharArray() {
    return myconv(next(), 6);
}

// Function to get the next input line
function next() {
    return obj.next();
}

// Function to check if there are more input lines
function hasNext() {
    return obj.hasNext();
}

// Function to initialize the input object with methods to manage input lines
function init(input) {
    return {
        list: input,
        index: 0,
        max: input.length,
        hasNext: function() {
            return (this.index < this.max);
        },
        next: function() {
            if (this.hasNext()) {
                return this.list[this.index++];
            } else {
                throw 'ArrayIndexOutOfBoundsException ‚There is no more input';
            }
        }
    };
}

// Function to output a string to the console
function myout(s) {
    console.log(s);
}

// Function to output a debug message to the console
function myerr(s) {
    console.error('debug:' + require('util').inspect(s, false, null));
}

// Function to convert strings to various formats based on a specified type
function myconv(i, no) {
    try {
        switch (no) {
            case 1:
                return parseInt(i);
            case 2:
                return i.split(' ');
            case 4:
                return i.split(' ').map(Number);
            case 6:
                return i.split('');
            case 7:
                return i.split('').map(Number);
            case 8:
                return i.join(' ');
            case 9:
                return i.join('\n');
            case 0:
                return i.join('');
            default:
                return i;
        }
    } catch (e) {
        return i;
    }
}

// Main function that reads an integer and outputs the ceiling of its half
function Main() {
    var N = nextInt();
    myout(Math.ceil(N / 2));
}