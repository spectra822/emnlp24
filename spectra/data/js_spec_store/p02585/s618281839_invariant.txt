// Segment 1: Read and parse input
// Precondition: The program reads from standard input containing:
//  First line: Two integers N and K separated by a space.
//  Second line: N integers separated by spaces.
//  Third line: N integers separated by spaces.
// Postcondition: The input is parsed into variables N, K, P, and C.
const [
    [N, K], P, C
] = args.trim().split`\n`.map(r => r.split` `.map(v => v | 0));

// Segment 2: Initialize array m with triplets
// Precondition: P and C are arrays of length N.
// Postcondition: m is an array of length N, each element is a triplet [p-1, BigInt(C[i]), BigInt(C[i])].
let m = P.map((p, i) => [p - 1, BigInt(C[i]), BigInt(C[i])]);

// Segment 3: Define operation op for combining states
// Precondition: m and x are arrays of triplets.
// Postcondition: op function is defined to combine two arrays of triplets.
const op = (x, y) => x.map(([a, b, c]) => [
    y[a][0],
    b + y[a][1],
    (c < b + y[a][2]) ? b + y[a][2] : c
]);

// Segment 4: Initialize array x with triplets
// Precondition: P and C are arrays of length N.
// Postcondition: x is an array of length N, each element is a triplet [p-1, BigInt(C[i]), BigInt(Math.max(0, C[i]))].
let x = P.map((p, i) => [p - 1, BigInt(C[i]), BigInt(Math.max(0, C[i]))]);

// Segment 5: Initialize max and n variables
// Precondition: N and K are integers.
// Postcondition: max is initialized to a very small BigInt value, n is initialized to K-1.
let max = BigInt(-2e18);
let n = K - 1;

// Segment 6: Perform binary exponentiation to combine states
// Precondition: m and x are arrays of triplets, n is a non-negative integer.
// Postcondition: m is updated by combining states using the op function.
while (n > 0) {
    if (n & 1) m = op(m, x);
    x = op(x, x);
    n >>= 1;
}

// Segment 7: Find the maximum value in the third element of triplets in m
// Precondition: m is an array of triplets.
// Postcondition: max holds the maximum value found in the third element of triplets in m.
for (let i = 0; i < N; i++)
    if (max < m[i][2]) max = m[i][2];

// Segment 8: Output the result
// Precondition: max holds the maximum value from the previous segment.
// Postcondition: The maximum value is printed to standard output.
// Output: A single integer value followed by a newline.
return `${max}`;
5 2
2 4 5 1 3
3 4 -10 -8 8
8