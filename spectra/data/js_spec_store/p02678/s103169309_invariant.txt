// Segment 1: Reading input and initializing variables
// Precondition: The program reads from standard input and expects the input in the following format:
//               First line: two integers N and M separated by a space
//               Next M lines: each line contains two integers A and B separated by a space
// Postcondition: Variables `N`, `M`, `lines`, `map`, and `ans` are initialized based on the input.
const input = require("fs").readFileSync("/dev/stdin", "utf8")
const lines = input.split('\n')
const [N, M] = lines[0].split(' ').map(Number)
const map = Array(N + 1).fill().map(_ => [])
const ans = Array(N + 1).fill(0)

// Segment 2: Constructing the adjacency list for the graph
// Precondition: `lines` contains the edges of the graph starting from index 1 to M
// Postcondition: `map` is populated such that map[i] contains all nodes adjacent to node i
for (let i = 1; i <= M; i++) {
    const [A, B] = lines[i].split(' ').map(Number)
    map[A].push(B)
    map[B].push(A)
}

// Segment 3: Performing BFS to determine the shortest path tree
// Precondition: `map` contains the adjacency list of the graph
// Postcondition: `ans` is populated such that ans[i] contains the parent of node i in the BFS tree
let next = [1]
let i = 0
while (i = next.shift()) {
    for (let j = 0; j < map[i].length; j++) {
        if (!ans[map[i][j]]) {
            ans[map[i][j]] = i
            next.push(map[i][j])
        }
    }
}

// Segment 4: Checking connectivity and preparing the output
// Precondition: `ans` contains the BFS tree with parent nodes
// Postcondition: The program prints "Yes" followed by the parent of each node from 2 to N if the graph is connected;
//                otherwise, it prints "No".
ans[1] = 'Yes'
for (let i = 2; i <= N; i++) {
    if (!ans[i]) {
        ans[1] = 'No'
        break
    }
}
if (ans[1] === 'No') {
    console.log('No')
} else {
    ans.shift()
    console.log(ans.join("\n"))
}
  N M
  A1 B1
  A2 B2
  ...
  AM BM
    Yes
    p2
    p3
    ...
    pN
    No